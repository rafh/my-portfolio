/**************
** Angles
***************/

@mixin angle($pseudo, $flip: false, $angle: 1.5deg) {

  // Possible values for $pseudo are: before, after, both
  @if $pseudo == 'before' or $pseudo == 'after' or $pseudo == 'both' {

      position: relative;
      z-index: 1;
      $selector: if($pseudo == 'both', '&:before,&:after', '&:#{$pseudo}');

      #{$selector} {

          background: inherit;
          content: '';
          display: block;
          height: 50%;
          left: 0;
          position: absolute;
          right: 0;
          z-index: -1;

      }

      @if $pseudo == 'before' {
          #{$selector} {
              top: 0;

              @if $flip {

                  @include transform( skewY($angle * -2));
                  @include transform-origin( 0 0);


              } @else {

                  @include transform(skewY($angle));
                  @include transform-origin( 100% 0);

              }
          }
      }

      @if $pseudo == 'after' {
          #{$selector} {
              bottom: 0;

              @if $flip {

                  @include transform(skewY($angle));
                  @include transform-origin( 100% 0);


              } @else {

                  @include transform( skewY($angle * -2));
                  @include transform-origin( 0 0);


              }
          }
      }

      @if $pseudo == 'both' {
          &:before {

              top: 0;

              @if $flip {

                  @include transform( skewY($angle * -2));
                  @include transform-origin( 0 0);


              } @else {

                  @include transform(skewY($angle));
                  @include transform-origin( 100% 0);

              }
          }

          &:after {

              bottom: 0;

              @if $flip {

                  @include transform(skewY($angle));
                  @include transform-origin( 0 0);


              } @else {

                  @include transform(skewY($angle * -2));
                  @include transform-origin( 100% );


              }
          }
      }
  }
}

@mixin rem($property, $values) {
    // Create a couple of empty lists as output buffers.
    $font-size: 16px;
    $px-values: ();
    $rem-values: ();

  // Loop through the $values list
    @each $value in $values {
        // For each property value, if it's in rem or px, derive both rem and
        // px values for it and add those to the end of the appropriate buffer.
        // Ensure all pixel values are rounded to the nearest pixel.
        @if $value == 0 or $value == 0px {
            // 0 -- use it without a unit
            $px-values: join($px-values, 0);
            $rem-values: join($rem-values, 0);
        } @else if type-of($value) == number and not unitless($value) and (unit($value) == px) {
            // px value given - calculate rem value from font-size
            $new-rem-value: $value / $font-size;
            $px-values: join($px-values, round($value));
            $rem-values: join($rem-values, #{$new-rem-value}rem);
        } @else if type-of($value) == number and not unitless($value) and (unit($value) == "%") {
            // % value given - don't add px or rem
            $px-values: join($px-values, #{$value});
            $rem-values: join($rem-values, #{$value});
        } @else if $value == auto {
            // auto - don't add px or rem
            $px-values: join($px-values, auto);
            $rem-values: join($rem-values, auto);
        } @else {
            // unitless value - use those directly as rem and calculate the px-fallback
            $px-values: join($px-values, round($value * $font-size));
            $rem-values: join($rem-values, #{$value}rem);
        }

    }

    // output the converted rules
    #{$property}: $px-values;
    #{$property}: $rem-values;

}

/**************
** Font Size
***************/

@mixin font-size($sizeValue: 12 ){
    font-size: $sizeValue + px; //fallback for old browsers
    font-size: (0.125 * $sizeValue) + rem;
}